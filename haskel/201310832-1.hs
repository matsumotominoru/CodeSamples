{-(9-0) 計算した結果は、
2^3*4=32, 100 'mod' 35 `div` 7 =4, 10 'div` 7 `mod` 5=1, 100 `div` 7+5*3 = 29 となった。したがって、
(2^3)*4, (100 `mod` 35) `div` 7, (10 `div` 7) `mod` 5, (100 `div` 7)+5*3 の順に計算していることになる。-}

{-(9-1) まず、これは条件文の形に定義すればよいことが分かる。リストの長さが２の倍数なら、空リストを、そうでなければ、
真ん中の要素を抜いたリストを作ればよい。まず、リストの初めから真ん中までを抜いたリストを作り、続いて、初めから
後ろの手前までを取り除いたリストを作ればよいから、次のように定義すればよい。-}
middle xs = if length xs `mod` 2 == 0
              then []
              else drop (length xs `div` 2) (take ((length xs `div` 2)+1) xs)

{-(9-2)これも条件文の形に定義すればよい。リストの長さが３の倍数でなければ、空リストを、３の倍数であれば３等分した真ん
中の部分を抜いたリストを作成すればよい。これもさっきと同じ要領で、３等分した初めの部分をとるリストと、３等分した後ろの部分をとる
リストを作成し、そのあと連結すればよい。したがって、次のように定義すればよい。-}
dropmiddle3rd xs = if length xs `mod` 3 == 0
                     then (take (length xs `div` 3) xs) ++ (drop ((length xs `div` 3) * 2) xs)
                     else []

{-(9-3) これは、リストの要素の積を作る関数から、次のように定義すればよい。なぜなら、productはすべての要素を掛け合わせるからである。-}
factorial n = product [1,2..n]
